const TelegramBot = require("node-telegram-bot-api");
const { Pool } = require("pg");

const TOKEN = process.env.TELEGRAM_TOKEN;
const DATABASE_URL = process.env.DATABASE_URL;

const bot = new TelegramBot(TOKEN, { polling: true });
console.log("start");
const pool = new Pool({ connectionString: DATABASE_URL });

const lastJokeIndexByChat = new Map();

const insults = [
  "–ù—É —Ç—ã –∏ —à—É—Ç–Ω–∏–∫, –∫–æ–Ω–µ—á–Ω–æ...",
  "–° —Ç–∞–∫–∏–º —á—É–≤—Å—Ç–≤–æ–º —é–º–æ—Ä–∞ —Ç–æ–ª—å–∫–æ –≤ —Ü–∏—Ä–∫ –∏–¥—Ç–∏.",
  "–í–æ—Ç —ç—Ç–æ –¥–∞, –æ—Ü–µ–Ω–∫–∞ –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–∞ –ø–æ —é–º–æ—Ä—É!",
  "–¢–µ–±–µ –±—ã –∫–Ω–∏–∂–∫–∏ —á–∏—Ç–∞—Ç—å, –∞ –Ω–µ —à—É—Ç–∫–∏ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å.",
  "–°–º–µ—à–Ω–µ–µ —Ç–≤–æ–µ–π –æ—Ü–µ–Ω–∫–∏ —Ç–æ–ª—å–∫–æ —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.",
  "–ù—É —Ç—ã –∏ –∫–ª–æ—É–Ω!",
  "–°–ø–∞—Å–∏–±–æ, –∫–∞–ø–∏—Ç–∞–Ω –û—á–µ–≤–∏–¥–Ω–æ—Å—Ç—å.",
  "–° —Ç–∞–∫–∏–º –≤–∫—É—Å–æ–º —Ç–æ–ª—å–∫–æ –∞–Ω–µ–∫–¥–æ—Ç—ã –ø—Ä–æ –∫–æ–ª–æ–±–∫–∞ —Å–ª—É—à–∞—Ç—å.",
  "–¢–≤–æ—è –æ—Ü–µ–Ω–∫–∞ –∫–∞–∫ —Ç–≤–æ–π –∞–≤–∞—Ç–∞—Ä ‚Äî –Ω–∏ –æ —á—ë–º.",
  "–ú–æ–∂–µ—Ç, —Ç–µ–±–µ –ª—É—á—à–µ –º–æ–ª—á–∞—Ç—å?",
];

// –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —à—É—Ç–∫—É
async function getRandomJoke() {
  const { rows } = await pool.query("SELECT * FROM jokes");
  if (rows.length === 0) return null;
  const idx = Math.floor(Math.random() * rows.length);
  return { joke: rows[idx], idx: rows[idx].id };
}

// –ö–æ–º–∞–Ω–¥–∞ /joke
bot.onText(/\/joke/, async (msg) => {
  const chatId = msg.chat.id;
  try {
    const result = await getRandomJoke();
    if (!result) {
      bot.sendMessage(chatId, "–®—É—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!");
      return;
    }
    const { joke, idx } = result;
    lastJokeIndexByChat.set(chatId, idx);
    bot.sendMessage(chatId, `üòÇ ${joke.text}\n\n–†–µ–π—Ç–∏–Ω–≥: ${joke.rating}`);
  } catch (err) {
    bot.sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —à—É—Ç–∫–∏.");
  }
});

// –û—Ü–µ–Ω–∫–∞ —à—É—Ç–∫–∏ (good/bad)
bot.on("message", async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text && msg.text.trim().toLowerCase();

  if (text === "good" || text === "bad") {
    const jokeId = lastJokeIndexByChat.get(chatId);
    if (typeof jokeId !== "number") {
      bot.sendMessage(chatId, "–°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ —à—É—Ç–∫—É –∫–æ–º–∞–Ω–¥–æ–π /joke!");
      return;
    }
    try {
      const { rows } = await pool.query("SELECT * FROM jokes WHERE id = $1", [
        jokeId,
      ]);
      const joke = rows[0];
      if (!joke) {
        bot.sendMessage(chatId, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —à—É—Ç–∫—É.");
        return;
      }
      let newRating = joke.rating;
      if (text === "good") {
        newRating += 1;
      } else if (text === "bad") {
        newRating = Math.max(0, newRating - 1);
      }
      await pool.query("UPDATE jokes SET rating = $1 WHERE id = $2", [
        newRating,
        jokeId,
      ]);

      let userName = msg.from.username
        ? "@" + msg.from.username
        : msg.from.first_name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π";
      const insult = insults[Math.floor(Math.random() * insults.length)];
      const response = `–®—É—Ç–∫–∞: ${joke.text}
–†–µ–π—Ç–∏–Ω–≥: ${newRating}
–û—Ü–µ–Ω–∏–ª: ${userName}
${insult}`;
      bot.sendMessage(chatId, response);
    } catch (err) {
      bot.sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ —à—É—Ç–∫–∏.");
    }
  }
});

// –¢–æ–ø —à—É—Ç–æ–∫
bot.onText(/\/top/, async (msg) => {
  const chatId = msg.chat.id;
  try {
    const { rows } = await pool.query(
      "SELECT * FROM jokes ORDER BY rating DESC LIMIT 5"
    );
    if (rows.length === 0) {
      bot.sendMessage(chatId, "–®—É—Ç–æ–∫ –Ω–µ—Ç!");
      return;
    }
    let text = "üèÜ –¢–æ–ø —à—É—Ç–æ–∫:\n\n";
    rows.forEach((j, i) => {
      text += `${i + 1}. ${j.text}\n–†–µ–π—Ç–∏–Ω–≥: ${j.rating}\n\n`;
    });
    bot.sendMessage(chatId, text);
  } catch (err) {
    bot.sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞.");
  }
});
